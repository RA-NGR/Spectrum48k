;------------------------------------------------
;--- 010 Editor v15.0 Syntax File
;
;       File: 010.syntax010
;    Authors: SweetScape Software
;    Version: 1.0
;    Purpose: Syntax for 010 Editor Binary Templates and Scripts.
;  File Mask: *.bt,*.1sc
;   ID Regex:
; LibVersion: 1.0
; LibLicense: MIT
;    Edit As: 
;    History:
;   1.0   2024-04-22 SweetScape: Initial release
;------------------------------------------------

; Constants

((identifier) @constant
 (#match? @constant "^[A-Z][A-Z\\d_]*$"))

(null) @constant
(true) @constant
(false) @constant
(this) @constant

; Keywords

"break" @keyword
"case" @keyword
"const" @keyword
"continue" @keyword
"default" @keyword
"do" @keyword
"else" @keyword
"enum" @keyword
"for" @keyword
"if" @keyword
"return" @keyword
"sizeof" @keyword
"startof" @keyword
"parentof" @keyword
"exists" @keyword
"function_exists" @keyword
"switch" @keyword
"typedef" @keyword
"union" @keyword
"while" @keyword
"#define" @keyword
"#elif" @keyword
"#else" @keyword
"#endif" @keyword
"#if" @keyword
"#ifdef" @keyword
"#ifndef" @keyword
"#include" @keyword
"#link" @keyword
(preproc_directive) @keyword

; Variables

(identifier) @variable
(field_identifier) @field

; Functions

(attribute_call_expression
    function: (identifier) @function.call)

(function_declarator
  declarator: (identifier) @function)

(function_definition
    (function_declarator
      declarator: (identifier) @function.definition)
    (compound_statement))

(call_expression
  function: (identifier) @function.call)

(call_expression
  function: (field_expression
    field: (field_identifier) @function.call))

; Data types

(type_identifier) @type
(type_definition
    (type_identifier) @type.definition)

(struct_specifier
    (type_identifier) @type)
(struct_specifier
    (type_identifier) @type.definition
    (compound_statement))

"struct" @type
"local" @type
(primitive_type) @type
"signed" @type
"unsigned" @type
"long" @type
"short" @type

; Strings

(string_literal) @string
(char_literal) @string
(system_lib_string) @string

; Numbers

(number_literal) @number

; Comments

(comment) @comment
(calculator_result) @calculator.result

; Operators

"--" @operator
"-" @operator
"-=" @operator
"=" @operator
"!=" @operator
"*" @operator
"&" @operator
"&&" @operator
"+" @operator
"++" @operator
"+=" @operator
"<=" @operator
"<" @operator
"==" @operator
">" @operator
">=" @operator
"||" @operator
">>" @operator
"<<" @operator
"!" @operator
"~" @operator
"/" @operator
"^" @operator
"|" @operator
"*=" @operator
"/=" @operator
"%=" @operator
"-=" @operator
"<<=" @operator
">>=" @operator
"&=" @operator
"^=" @operator
"|=" @operator
"." @operator
"?" @operator
"[" @operator
"]" @operator

; Attributes

(attribute_declaration
 ("<") @attribute )
(attribute_declaration
 (">") @attribute )
(attribute_declaration) @attribute

;-------------------------------------
#section match ;Brace matching

(parenthesized_expression
    ("(" @match.brace)
    (")" @match.brace) ) @match
(argument_list
    ("(" @match.brace)
    (")" @match.brace) ) @match
(struct_argument_list
    ("(" @match.brace)
    (")" @match.brace) ) @match
(cast_expression
    ("(" @match.brace)
    (")" @match.brace) ) @match
(startof_expression
    ("(" @match.brace)
    (")" @match.brace) ) @match
(sizeof_expression
    ("(" @match.brace)
    (")" @match.brace) ) @match
(parentof_expression
    ("(" @match.brace)
    (")" @match.brace) ) @match
(exists_expression
    ("(" @match.brace)
    (")" @match.brace) ) @match
(function_exists_expression
    ("(" @match.brace)
    (")" @match.brace) ) @match
(parameter_list
    ("(" @match.brace)
    (")" @match.brace) ) @match
(for_statement
    ("(" @match.brace)
    (")" @match.brace) ) @match
(compound_statement
    ("{" @match.brace)
    ("}" @match.brace) ) @match
(array_declarator
    ("[" @match.brace)
    ("]" @match.brace) ) @match
(subscript_expression
    ("[" @match.brace)
    ("]" @match.brace) ) @match
(attribute_declaration
    ("<" @match.brace)
    (">" @match.brace) ) @match

;-------------------------------------
#section fold ;Code folding

(compound_statement) @fold
