#pragma once
#include "Common.h"
#include "RingBuffer.h"

const uint8_t Envelope[16][128] = {
{31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0},
{31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31},
{31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31},
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31},
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31},
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0},
{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};

const uint8_t Rampa_AY_table[16] = { 0,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31 };

class Sound
{
	union AYData
	{
		struct
		{
			uint16_t tStates;
			uint8_t value;
			struct
			{
				uint8_t unused1 : 2;
				uint8_t isData : 1;
				uint8_t unused2 : 5;
			} port;
		} data;
		uint32_t raw;
	};
	int table[32];                   /**< table of volumes for chip */
	struct
	{
		int tone_a;       /**< R0, R1 */
		int tone_b;       /**< R2, R3 */
		int tone_c;       /**< R4, R5 */
		int noise;        /**< R6 */
		int R7_tone_a;    /**< R7 bit 0 */
		int R7_tone_b;    /**< R7 bit 1 */
		int R7_tone_c;    /**< R7 bit 2 */
		int R7_noise_a;   /**< R7 bit 3 */
		int R7_noise_b;   /**< R7 bit 4 */
		int R7_noise_c;   /**< R7 bit 5 */
		int vol_a;        /**< R8 bits 3-0 */
		int vol_b;        /**< R9 bits 3-0 */
		int vol_c;        /**< R10 bits 3-0 */
		int env_a;        /**< R8 bit 4 */
		int env_b;        /**< R9 bit 4 */
		int env_c;        /**< R10 bit 4 */
		int env_freq;     /**< R11, R12 */
		int env_style;    /**< R13 */
		int IOPortA;      /**< R14 */
		int IOPortB;      /**< R15 */
	} ayregs;
	int bit_a;                       /**< state of channel A generator */
	int bit_b;                       /**< state of channel B generator */
	int bit_c;                       /**< state of channel C generator */
	int bit_n;                       /**< current generator state */
	int period_n;                    // Noise period 
	int cnt_a;                       /**< back counter of A */
	int cnt_b;                       /**< back counter of B */
	int cnt_c;                       /**< back counter of C */
	int cnt_n;                       /**< back counter of noise generator */
	int cnt_e;                       /**< back counter of envelop generator */
	int ChipTacts_per_outcount;      /**< chip's counts per one sound signal count */
	int Amp_Global;                  /**< scale factor for amplitude */
	int EnvNum;                      /**< number of current envilopment (0...15) */
	int env_pos;                     /**< current position in envelop (0...127) */
	int Cur_Seed;                    /**< random numbers counter */

	uint8_t regs[16];
	uint8_t selectedRegister;
	//union
	//{
	//	uint8_t r8[16];
	//	uint16_t r16[8];
	//} m_regsAY;
	//uint8_t m_selectedRegAY;
	RingBuffer<AY_BUFFER_SIZE, union AYData> m_ayBuffer;
	alarm_pool_t* m_pAlarmPool = NULL;
	struct repeating_timer m_clockTimer;
	int m_cyclesDone = 0;
	int m_samplesPerLoop;
	uint16_t m_soundVol = 255;
	uint8_t m_samplesPerOut;
	uint8_t m_prevBit;
	bool m_enableAY;
	RingBuffer<BEEPER_BUFFER_SIZE, uint16_t> m_beeprBuffer;
	uint16_t m_beeperSampleBuffer[2][624];
	uint8_t m_currBuff;
public:
	Sound() {};
	~Sound();
	bool init();
	void update();
private:
	void updateRegisters();
	void reset();
	uint16_t __attribute__((section(".time_critical." "genSound"))) genSound(uint16_t tStates);
	static bool __attribute__((section(".time_critical." "onTimer"))) onTimer(struct repeating_timer* timer);
};

class Keyboard
{
	struct repeating_timer m_clockTimer;
public:
	Keyboard() {};
	bool init();
	uint8_t* getBuffer() { return m_portData; };
	uint8_t getData(uint8_t portIdx) { return m_portData[portIdx < 10 ? portIdx : 9]; };
	~Keyboard();
private:
	uint8_t m_portScanMask[10] = { 0b11101111, 0b11011111, 0b10111111, 0b01111111, 0b11111110, 0b11111101, 0b11111011, 0b11110111, 0b01100000, 0b10100000 };
	uint8_t m_portScanIdx = 0;
	uint8_t m_portData[10];
	void writeReg(uint8_t reg, uint8_t data);
	uint8_t readKeys();
	static bool onTimer(struct repeating_timer* timer);
};

class Display
{
	const uint16_t m_pioProgramInstructions[3] = {
		0x98a0, //  0: pull   block           side 1     
		0x7100, //  1: out    pins, 32        side 0 [1] 
		0x1800, //  2: jmp    0               side 1     
	};
	const struct pio_program m_pioProgram = {
		.instructions = m_pioProgramInstructions,
		.length = 3,
		.origin = -1,
	};
public:
	Display() { };
	~Display();
	bool init();
	uint16_t* getBuffer(uint8_t bufferIndex) { return (!m_initComplete ? NULL : m_pDMABuffers[bufferIndex & 0x01]); };
	void drawBuffer(uint8_t bufferIndex, uint16_t bufferSize);
	void setAddrWindow(uint16_t startX, uint16_t startY, uint16_t endX, uint16_t endY);
	void writeData32(uint32_t data) { m_pio->txf[m_pioSM] = (data); m_pio->fdebug = m_pullStallMask; while (!(m_pio->fdebug & m_pullStallMask)); };
private:
	bool m_initComplete = false;
	uint16_t* m_pDMABuffers[2] = { 0 };
	PIO m_pio = 0;
	int m_pioSM = -1;
	uint32_t m_pioInstrSetDC = 0;
	uint32_t m_pioInstrClrDC = 0;
	uint32_t m_pullStallMask = 0;
	int m_dmaChannel = -1;
	dma_channel_config m_dmaConfig;
	void writeCommand(uint8_t cmd);
	void writeData(uint8_t data) { m_pio->txf[m_pioSM] = (data); m_pio->fdebug = m_pullStallMask; while (!(m_pio->fdebug & m_pullStallMask)); };
};

